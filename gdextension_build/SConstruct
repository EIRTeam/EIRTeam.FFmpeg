#!/usr/bin/env python
import atexit
import os
import sys
import methods
import time
import ffmpeg_download

# For the reference:
# - CCFLAGS are compilation flags shared between C and C++
# - CFLAGS are for C-specific compilation flags
# - CXXFLAGS are for C++-specific compilation flags
# - CPPFLAGS are for pre-processor flags
# - CPPDEFINES are for pre-processor defines
# - LINKFLAGS are for linking flags

time_at_start = time.time()

env = SConscript("./godot-cpp/SConstruct")
env.__class__.disable_warnings = methods.disable_warnings
env.__class__.Run = methods.Run


# Allow generation of compilation DB (`compile_commands.json`) for intellisense / code hinting
# Generating the compilation DB requires SCons 4.0.0 or later.
from SCons import __version__ as scons_raw_version

scons_ver = env._get_major_minor_revision(scons_raw_version)

if scons_ver < (4, 0, 0):
    print("Warning: The `compiledb` option requires SCons 4.0 or later, but your version is %s. `compiledb` is not enabled." % scons_raw_version)
else:
    env.Tool("compilation_db")
    env.Alias("compiledb", env.CompilationDatabase('../compile_commands.json'))

addon_base_dir = "build/addons/ffmpeg/"
addon_platform_dir = addon_base_dir

if env["platform"] == "windows":
    addon_platform_dir += "win64/"
else:
    addon_platform_dir += "linux64/"

opts = Variables([], ARGUMENTS)
opts.Add(BoolVariable("verbose", "Enable verbose output for the compilation", False))

opts.Update(env)

if not env["verbose"]:
    methods.no_verbose(sys, env)

env.Append(CPPDEFINES=["GDEXTENSION"])
env.Append(CPPPATH=["../"])
sources = Glob("../*.cpp")
sources.extend(Glob("*.cpp"))

env.Prepend(CPPPATH="../thirdparty/ffmpeg/include")
env.Append(LIBPATH="../thirdparty/ffmpeg/lib")
ffmpeg_libs = ["avcodec", "avfilter", "avformat", "avutil", "swresample", "swscale"]

env.Append(LIBS=ffmpeg_libs)

if env["platform"] == "windows" and sys.platform == "win32" and not env.get("is_msvc", False):
    # Workaround for https://github.com/godotengine/godot-cpp/issues/1064
    env.Append(CCFLAGS=["-O3", "-Wwrite-strings"])
    env.Append(
        LINKFLAGS=[
            "-static",
            "-Wl,--no-undefined",
            "-static-libgcc",
            "-static-libstdc++",
        ]
    )
if env["platform"] == "macos":
    methods.write_macos_plist(
        f'{addon_platform_dir}libgdffmpeg.macos.{env["target"]}.framework',
        f'libgdffmpeg_advanced.macos.{env["target"]}',
        "org.godotengine.ffmpeg",
        "FFmpeg for Godot",
    )
    library = env.SharedLibrary(
        f'{addon_platform_dir}bin/libgdffmpeg.macos.{env["target"]}.framework/libgdffmpeg_advanced.macos.{env["target"]}',
        source=sources,
    )
else:
    library = env.SharedLibrary(
        f'{addon_platform_dir}libgdffmpeg{env["suffix"]}{env["SHLIBSUFFIX"]}',
        source=sources,
    )

FFMPEG_DUMMY = "../thirdparty/ffmpeg/LICENSE.txt"
ffmpeg_download_action = ffmpeg_download.ffmpeg_download_builder(env, FFMPEG_DUMMY, "ffmpeg_download.py")
ffmpeg_install_action = ffmpeg_download.ffmpeg_install(env, f"#{addon_platform_dir}", "../thirdparty/ffmpeg")
env.Depends(sources, env.Install(addon_base_dir, "ffmpeg.gdextension"))
license_install_action = env.InstallAs(f"{addon_base_dir}LICENSE-ffmpeg.txt", FFMPEG_DUMMY)
env.Depends(sources, ffmpeg_install_action)
env.Depends(sources, license_install_action)

Default(library)


def print_elapsed_time():
    elapsed_time_sec = round(time.time() - time_at_start, 3)
    time_ms = round((elapsed_time_sec % 1) * 1000)
    print("[Time elapsed: {}.{:03}]".format(time.strftime("%H:%M:%S", time.gmtime(elapsed_time_sec)), time_ms))


atexit.register(print_elapsed_time)
